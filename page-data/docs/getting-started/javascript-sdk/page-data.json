{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/javascript-sdk","result":{"data":{"mdx":{"id":"29567727-6ad3-5374-a77b-a67aacee5b58","excerpt":"Introduction This project contains components of the OpenTelemetry Javascript SDK for OpenTelemetry, a framework to collect traces\nand metrics from applicationsâ€¦","fields":{"slug":"/docs/getting-started/javascript-sdk/"},"frontmatter":{"title":"Getting Started with JavaScript SDK","description":"This project contains components of the OpenTelemetry Javascript SDK for OpenTelemetry, a framework to collect traces and metrics from applications. In order to trace data from various web applications, OpenTelemetry provides plugins to automatically trace data from web applications. As OpenTelemetry does not recognize AWS X-Ray as an officially supported backend, configurations have to be made in the NodeTracerProvider provided by the OpenTelemetry API.","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started with JavaScript SDK\",\n  \"description\": \"This project contains components of the OpenTelemetry Javascript SDK for OpenTelemetry, a framework to collect traces and metrics from applications. In order to trace data from various web applications, OpenTelemetry provides plugins to automatically trace data from web applications. As OpenTelemetry does not recognize AWS X-Ray as an officially supported backend, configurations have to be made in the NodeTracerProvider provided by the OpenTelemetry API.\",\n  \"path\": \"/docs/getting-started/javascript-sdk\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Introduction\"), mdx(\"p\", null, \"This project contains components of the OpenTelemetry Javascript SDK for OpenTelemetry, a framework to collect traces\\nand metrics from applications. In order to trace data from various web applications, OpenTelemetry provides plugins to\\nautomatically trace data from web applications. As OpenTelemetry does not recognize AWS X-Ray as an officially supported\\nbackend, configurations have to be made in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NodeTracerProvider\"), \" provided by the OpenTelemetry API.\"), mdx(\"img\", {\n    src: img15,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"The data path of exporting to AWS X-Ray starts from instrumenting an app with our configured tracer, export traces to\\ncollector, and the collector will export to AWS X-Ray.\"), mdx(\"h3\", {\n    \"id\": \"what-is-awsxrayidgenerator\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#what-is-awsxrayidgenerator\",\n    \"aria-label\": \"what is awsxrayidgenerator permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"What is AWSXRayIdGenerator?\"), mdx(\"p\", null, \"By default, OpenTelemetry uses purely random trace IDs, which differs from AWS X-Ray where the first 4 bytes of the trace\\nID must be set to the start time of the trace. OpenTelemetry provides an extension point, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IdGenerator\"), \" to allow us to\\nuse a custom generator that conforms to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html\"\n  }), \"X-Ray requirement\"), \".\\nWe implemented an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-js/tree/master/packages/opentelemetry-id-generator-aws-xray\"\n  }), \"AWS XRay IdGenerator\"), \"\\nwhich generates traces with the first 8 hexadecimals set to the start time according to AWS X-Ray trace ID format.\"), mdx(\"h3\", {\n    \"id\": \"what-is-awsxraypropagator\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#what-is-awsxraypropagator\",\n    \"aria-label\": \"what is awsxraypropagator permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"What is AWSXRayPropagator?\"), mdx(\"p\", null, \"By default, OpenTelemetry uses the W3C Trace Context format for propagating spans, and out-of-the-box supports B3 and\\nJaeger propagation. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpTextFormat\"), \" interface allows other propagators to be implemented, so we implemented a\\npropagator that conforms with\\nthe \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader\"\n  }), \"X-Ray trace header format\"), \".\\nWe implemented an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-js/tree/master/packages/opentelemetry-propagator-aws-xray\"\n  }), \"AWS Propagator\"), \" which\\nconforms the propagation headers to the AWS X-Ray format.\"), mdx(\"p\", null, \"Further information about OpenTelemetry can be found in the upstream \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-js\"\n  }), \"repo\"), \".\"), mdx(\"p\", null, \"We will provide a sample, to instrument an Express application with traces conforming to AWS X-Ray.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Requirements\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/en/download/\"\n  }), \"Node JS v8.50 (or later)\"), \" is required to run an application using OpenTelemetry.\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the AWS Distro for OpenTelemetry Collector running to export traces to X-Ray.\\nSee the AWS OTel Collector documentation for setup instructions.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"getting-the-sdk-and-dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#getting-the-sdk-and-dependencies\",\n    \"aria-label\": \"getting the sdk and dependencies permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Getting the SDK and Dependencies\"), mdx(\"p\", null, \"In order to trace your application, the following OpenTelemetry packages will be required to be installed in your applications main directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"$ npm install \\\\\\n  @opentelemetry/api \\\\\\n  @opentelemetry/node \\\\\\n  @opentelemetry/resources \\\\\\n  @opentelemetry/tracing \\\\\\n  @opentelemetry/exporter-collector\\n\")), mdx(\"p\", null, \"Install the AWS X-Ray components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"$ npm install \\\\\\n  @aws/otel-aws-xray-propagator \\\\\\n  @aws/otel-aws-xray-id-generator\\n\")), mdx(\"p\", null, \"To install a specific version, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-js/releases\"\n  }), \"release tags on the Github releases page\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-a-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#instrumenting-a-library\",\n    \"aria-label\": \"instrumenting a library permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Instrumenting a Library\"), mdx(\"p\", null, \"OpenTelemetry can collect tracing data from various applications automatically using plugins.\\nThe \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-js#plugins\"\n  }), \"OpenTelemetry upstream repo\"), \" contains the list of\\nsupported modules, libraries, and installation instructions.\"), mdx(\"p\", null, \"OpenTelemetry Express Instrumentation allows the user to automatically collect trace data and export them to their backend\\nof choice, to give observability with distributed systems. An example of how to instrument an Express application is given below:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"All of the configuration code in this getting started should be place in the same file;\"), \" create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tracer.js\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"touch tracer.js\\n\")), mdx(\"p\", null, \"To load the express plugin, specify it in the Node Tracer\\u2019s configuration and set the flag enabled to true:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"title=tracer.js lineNumbers=true\",\n    \"title\": \"tracer.js\",\n    \"lineNumbers\": \"true\"\n  }), \"const { NodeTracerProvider } = require('@opentelemetry/node');\\n\\nmodule.exports = (serviceName) => {\\n    const tracerConfig = {\\n        plugins: {\\n         express: {\\n          enabled: true,\\n           // You may use a package name or absolute path to the file.\\n          path: '@opentelemetry/plugin-express',\\n          }\\n        }\\n    }\\n    const tracerProvider = new NodeTracerProvider(tracerConfig);\\n\\n    return trace.getTracer(\\\"example-tracer\\\")\\n}\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"configure-global-tracer-for-aws-x-ray\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#configure-global-tracer-for-aws-x-ray\",\n    \"aria-label\": \"configure global tracer for aws x ray permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Configure Global Tracer for AWS X-Ray\"), mdx(\"p\", null, \"The Global Tracer configuration for AWS X-Ray is uniform for all applications. This can be configured within\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tracer.js\"), \" file above with appropriate AWS X-Ray configs. Included in this repository, we can use our custom\\nIdGenerator, Propagator, and Resource detectors.\"), mdx(\"h3\", {\n    \"id\": \"configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#configuration\",\n    \"aria-label\": \"configuration permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Configuration\"), mdx(\"p\", null, \"The following will set the tracer\\u2019s global propagator to the AWS X-Ray propagator to conform to AWS X-Ray trace header\\u2019s.\\nAlso within the tracerConfig, we can set the idGenerator to use the AWSXRayIdGenerator.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"title=tracer.js lineNumbers=true\",\n    \"title\": \"tracer.js\",\n    \"lineNumbers\": \"true\"\n  }), \"const { NodeTracerProvider } = require('@opentelemetry/node');\\nconst { SimpleSpanProcessor, ConsoleSpanExporter } = require(\\\"@opentelemetry/tracing\\\");\\nconst { CollectorTraceExporter } = require('@opentelemetry/exporter-collector');\\n\\nconst { AWSXRayPropagator } = require('@aws/otel-aws-xray-propagator');\\nconst { AwsXRayIdGenerator } = require('@aws/otel-aws-xray-id-generator');\\n\\n\\n// const { AwsXRayPropagator } = require('@aws-observability/propagator-aws-xray');\\n// const { AwsXRayIdGenerator } = require('@aws-observability/id-generator-aws-xray');\\n\\nconst { context, propagation, trace } = require(\\\"@opentelemetry/api\\\");\\n\\nmodule.exports = (serviceName) => {\\n    // set global propagator\\n    propagation.setGlobalPropagator(new AWSXRayPropagator());\\n\\n    const tracerConfig = {\\n        //\\n        idGenerator: new AwsXRayIdGenerator();\\n        plugins: {\\n        }\\n    }\\n    const tracerProvider = new NodeTracerProvider(tracerConfig);\\n\\n    return trace.getTracer(\\\"example-xray-tracer\\\")\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"export-trace-data-to-otlp-exporter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#export-trace-data-to-otlp-exporter\",\n    \"aria-label\": \"export trace data to otlp exporter permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Export Trace Data to OTLP exporter\"), mdx(\"p\", null, \"To export to AWS X-Ray we setup an OTLP exporter which is configured to send data to\\nan \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector/blob/master/receiver/otlpreceiver/README.md\"\n  }), \"OpenTelemetry collector\"), \"\\nat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:55680\"), \". The AWS Distro for OpenTelemetry Collector to export traces to X-Ray should be setup as a part of the\\nrequirements. The setup for the OTLP exporter will set up within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tracer.js\"), \" after the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tracerProvider\"), \" is instantiated.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"title=tracer.js lineNumbers=true\",\n    \"title\": \"tracer.js\",\n    \"lineNumbers\": \"true\"\n  }), \"const otlpExporter = new CollectorTraceExporter({\\n    serviceName: serviceName,\\n    protocolNode: 2,\\n  });\\n  tracerProvider.addSpanProcessor(new SimpleSpanProcessor(otlpExporter));\\n  tracerProvider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\")), mdx(\"p\", null, \"Next, start the application to specify the required tracing module via the -r flag.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ node -r ./tracer.js app\\n\")), mdx(\"h4\", {\n    \"id\": \"adding-custom-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#adding-custom-attributes\",\n    \"aria-label\": \"adding custom attributes permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding Custom Attributes\"), mdx(\"p\", null, \"You can add custom attributes to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span\"), \" by defining an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AttributeKey\"), \" and calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttribute\"), \"\\non the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span\"), \". The JS SDK creates spans via it\\u2019s supported web framework plugins. You\\nuse \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracingContextUtils.getCurrentSpan()\"), \" to access the current span and set the attribute for a key that you have\\ndefined as a constant by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AttributeKeys\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"title=tracer.js lineNumbers=true\",\n    \"title\": \"tracer.js\",\n    \"lineNumbers\": \"true\"\n  }), \"const { context, propagation, trace } = require(\\\"@opentelemetry/api\\\");\\n\\nconst tracer = require('./xray-tracer')('your app name');\\n\\n//...\\n\\nfunction SetSpanAttribute() {\\n  const span = tracer.getCurrentSpan()\\n  String exampleAttribute = exampleAttribute();\\n  TracingContextUtils.getCurrentSpan().setAttribute(EXAMPLE_ATTRIBUTE, exampleAttribute);\\n}\\n\")), mdx(\"p\", null, \"Note: When using AWS X-Ray as your tracing backend, you can control whether attributes are uploaded as annotations or\\nmetadata by configuring the AWS OTel Collector\\u2019s\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/master/exporter/awsxrayexporter#exporter-configuration\"\n  }), \"indexed keys\"), \".\\nAdditionally, you can set attributes as annotations or metadata in code by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttribute(\\u201Cannotation.<key>\\u201D, <value>)\"), \"\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttribute(\\u201Cmetadata.<key>\\u201D, <value>)\"), \".\"), mdx(\"h4\", {\n    \"id\": \"creating-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#creating-spans\",\n    \"aria-label\": \"creating spans permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating Spans\"), mdx(\"p\", null, \"Spans can be manually created using the standard OpenTelemetry API as well.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"title=tracer.js lineNumbers=true\",\n    \"title\": \"tracer.js\",\n    \"lineNumbers\": \"true\"\n  }), \"const span = tracer.startSpan('op');\\n//...\\nspan.end();\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":3,"value":"What is AWSXRayIdGenerator?"},{"depth":3,"value":"What is AWSXRayPropagator?"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Getting the SDK and Dependencies"},{"depth":2,"value":"Instrumenting a Library"},{"depth":2,"value":"Configure Global Tracer for AWS X-Ray"},{"depth":3,"value":"Configuration"},{"depth":4,"value":"Export Trace Data to OTLP exporter"},{"depth":4,"value":"Adding Custom Attributes"},{"depth":4,"value":"Creating Spans"}]}},"pageContext":{"slug":"/docs/getting-started/javascript-sdk/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/javascript-sdk.mdx"}},"staticQueryHashes":["2501019404","973074209"]}