{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/ecs-metrics-receiver","result":{"data":{"mdx":{"id":"c45aae18-8a57-5c38-8b13-086aed8e0c09","excerpt":"The Amazon ECS container agent provides a method for customers to retrieve various task metadata and\n Docker stats  by using\n ECS Task Metadata Endpoint .\nTheâ€¦","fields":{"slug":"/docs/getting-started/ecs-metrics-receiver/"},"frontmatter":{"title":"Getting started using AWS ECS container metrics receiver in AWS OpenTelemetry Collector","description":"The Amazon ECS container agent provides a method to retrieve various task metadata and Docker stats, which is referred to as the task metadata endpoint. AWS Container Observability team wrote a receiver in the OpenTelemetry Collector that scrapes this task metadata endpoint and collects resource (such as CPU, memory, network, and disk) usage metrics. Customers can enable awsecscontainermetrics receiver in their OpenTelemetry configuration file to collect specific task- and container-level metrics and send them to their desired destinations and monitoring solutions.","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting started using AWS ECS container metrics receiver in AWS OpenTelemetry Collector\",\n  \"description\": \"The Amazon ECS container agent provides a method to retrieve various task metadata and Docker stats, which is referred to as the task metadata endpoint. AWS Container Observability team wrote a receiver in the OpenTelemetry Collector that scrapes this task metadata endpoint and collects resource (such as CPU, memory, network, and disk) usage metrics. Customers can enable awsecscontainermetrics receiver in their OpenTelemetry configuration file to collect specific task- and container-level metrics and send them to their desired destinations and monitoring solutions.\",\n  \"path\": \"/docs/getting-started/ecs-metrics-receiver\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Amazon ECS container agent provides a method for customers to retrieve various task metadata and\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/engine/api/v1.30/#operation/ContainerStats\"\n  }), \"Docker stats\"), \" by using\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint.html\"\n  }), \"ECS Task Metadata Endpoint\"), \".\\nThe AWS Container Observability team developed a receiver in the OpenTelemetry Collector that scrapes this endpoint and\\ncollects container metrics (such as CPU, memory, network, and disk). Customers can enable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awsecscontainermetrics\"), \" receiver\\nin their OpenTelemetry configuration file to collect specific task- and container-level metrics and send the data to\\ndesired monitoring tools such as Amazon CloudWatch.\"), mdx(\"p\", null, \"This receiver works with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v4.html\"\n  }), \"ECS Task Metadata Endpoint V4\"), \",\\nwhich means Amazon ECS tasks with Fargate launch type with platform version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.4.0\"), \" or later or Amazon ECS tasks with Amazon\\nEC2 launch type with ECS agent version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.39.0+\"), \". For more information, see\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-versions.html\"\n  }), \"Amazon ECS Container Agent Versions\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"enabling-the-aws-ecs-container-metrics-receiver\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#enabling-the-aws-ecs-container-metrics-receiver\",\n    \"aria-label\": \"enabling the aws ecs container metrics receiver permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Enabling the AWS ECS Container Metrics Receiver\"), mdx(\"p\", null, \"To enable the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awsecscontainermetrics\"), \" receiver, add the name under receiver section in the config file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(local/config.yaml)\"), \".\\nBy default, the receiver scrapes the ECS task metadata endpoint every 20s and collects all metrics\\n(For the full list of metrics, see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#available-metrics\"\n  }), \"Available Metrics\"), \".\"), mdx(\"p\", null, \"The following configuration collects AWS ECS resource usage metrics by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awsecscontainermetrics\"), \" receiver and sends\\nthem to CloudWatch using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awsemf\"), \" exporter. Check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws-otel.github.io/docs/setup/ecs\"\n  }), \"SETUP\"), \" section for\\nconfiguring AWS Distro for OpenTelemetry Collector in Amazon Elastic Container Service.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"receivers:\\n  awsecscontainermetrics:\\nexporters:\\n  awsemf:\\n      namespace: 'ECS/ContainerMetrics/OpenTelemetry'\\n      log_group_name: '/ecs/containermetrics/opentelemetry'\\n\\nservice:\\n  pipelines:\\n      metrics:\\n          receivers: [awsecscontainermetrics]\\n          exporters: [awsemf]\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"set-collection-interval-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#set-collection-interval-metrics\",\n    \"aria-label\": \"set collection interval metrics permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Set Collection Interval Metrics\"), mdx(\"p\", null, \"Customers can configure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"collection_interval\"), \" under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awsecscontainermetrics\"), \" receiver to scrape and gather metrics\\nat a specific interval. The following example configuration will collect metrics every 40 seconds.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"receivers:\\n  awsecscontainermetrics:\\n      collection_interval: 40s\\nexporters:\\n  awsemf:\\n      namespace: 'ECS/ContainerMetrics/OpenTelemetry'\\n      log_group_name: '/ecs/containermetrics/opentelemetry'\\n\\nservice:\\n  pipelines:\\n      metrics:\\n          receivers: [awsecscontainermetrics]\\n          exporters: [awsemf]\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"collect-specific-metrics-and-update-metric-names\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#collect-specific-metrics-and-update-metric-names\",\n    \"aria-label\": \"collect specific metrics and update metric names permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Collect specific metrics and update metric names\"), mdx(\"p\", null, \"The previous configuration collects all the metrics and sends them to Amazon CloudWatch using default names. Customers\\ncan use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"metrictransform\"), \" processors to send specific metrics and rename them respectively.\"), mdx(\"p\", null, \"The following configuration example collects only the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ecs.task.memory.utilized\"), \" metric and renames it\\nto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MemoryUtilized\"), \" before sending to CloudWatch.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"receivers:\\n  awsecscontainermetrics:\\nexporters:\\n  awsemf:\\n      namespace: 'ECS/ContainerMetrics/OpenTelemetry'\\n      log_group_name: '/ecs/containermetrics/opentelemetry'\\nprocessors:\\n  filter:\\n    metrics:\\n      include:\\n        match_type: strict\\n        metric_names:\\n          - ecs.task.memory.utilized\\n\\n  metricstransform:\\n    transforms:\\n      - metric_name: ecs.task.memory.utilized\\n        action: update\\n        new_name: MemoryUtilized\\n\\nservice:\\n  pipelines:\\n      metrics:\\n          receivers: [awsecscontainermetrics]\\n          processors: [filter, metricstransform]\\n          exporters: [awsemf]\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"a-full-configuration-for-task-level-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#a-full-configuration-for-task-level-metrics\",\n    \"aria-label\": \"a full configuration for task level metrics permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"A full configuration for task level metrics\"), mdx(\"p\", null, \"The following example shows a full configuration to get most useful task level metrics. It uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awsecscontainermetrics\"), \"\\nreceiver to collect all the resource usage metrics from ECS task metadata endpoint. It applies \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" processor to\\nselect only 8 task-level metrics and update metrics names using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"metricstransform\"), \" processor. Finally, it sends the\\nmetrics to CloudWatch using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awsemf\"), \" exporter under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ECS/ContainerMetrics/OpenTelemetry\"), \" namespace. Check the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/cloudwatch-metrics\"\n  }), \"AWS EMF Exporter\"), \" documentation to see and\\nexplore the metrics in Amazon CloudWatch.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"receivers:\\n  awsecscontainermetrics:\\nexporters:\\n  awsemf:\\n      namespace: 'ECS/ContainerMetrics/OpenTelemetry'\\n      log_group_name: '/ecs/containermetrics/opentelemetry'\\nprocessors:\\n  filter:\\n    metrics:\\n      include:\\n        match_type: strict\\n        metric_names:\\n          - ecs.task.memory.utilized\\n          - ecs.task.memory.reserved\\n          - ecs.task.cpu.utilized\\n          - ecs.task.cpu.reserved\\n          - ecs.task.network.rate.rx\\n          - ecs.task.network.rate.tx\\n          - ecs.task.storage.read_bytes\\n          - ecs.task.storage.write_bytes\\n  metricstransform:\\n    transforms:\\n      - metric_name: ecs.task.memory.utilized\\n        action: update\\n        new_name: MemoryUtilized\\n      - metric_name: ecs.task.memory.reserved\\n        action: update\\n        new_name: MemoryReserved\\n      - metric_name: ecs.task.cpu.utilized\\n        action: update\\n        new_name: CpuUtilized\\n      - metric_name: ecs.task.cpu.reserved\\n        action: update\\n        new_name: CpuReserved\\n      - metric_name: ecs.task.network.rate.rx\\n        action: update\\n        new_name: NetworkRx\\n      - metric_name: ecs.task.network.rate.tx\\n        action: update\\n        new_name: NetworkTx\\n      - metric_name: ecs.task.storage.read_bytes\\n        action: update\\n        new_name: StorageRead\\n      - metric_name: ecs.task.storage.write_bytes\\n        action: update\\n        new_name: StorageWrite\\n\\nservice:\\n  pipelines:\\n      metrics:\\n          receivers: [awsecscontainermetrics]\\n          processors: [filter, metricstransform]\\n          exporters: [awsemf]\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"available-metrics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#available-metrics\",\n    \"aria-label\": \"available metrics permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Available Metrics\"), mdx(\"p\", null, \"The following table lists all metrics emitted by AWS ECS container metrics receiver.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Task Level Metrics\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Container Level Metrics\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Unit\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.memory.usage\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.memory.usage\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.memory.usage.max\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.memory.usage.max\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.memory.usage.limit\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.memory.usage.limit\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.memory.reserved\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.memory.reserved\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Megabytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.memory.utilized\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.memory.utilized\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Megabytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.usage.total\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.usage.total\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Nanoseconds\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.usage.kernelmode\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.usage.kernelmode\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Nanoseconds\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.usage.usermode\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.usage.usermode\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Nanoseconds\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.usage.system\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.usage.system\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Nanoseconds\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.usage.vcpu\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.usage.vcpu\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"vCPU\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.cores\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.cores\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Count\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.onlines\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.onlines\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Count\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.reserved\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.reserved\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"vCPU\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.cpu.utilized\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.cpu.utilized\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Percent\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.rate.rx\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.rate.rx\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes/Second\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.rate.tx\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.rate.tx\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes/Second\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.io.usage.rx\", \"_\", \"bytes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.io.usage.rx\", \"_\", \"bytes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.io.usage.rx\", \"_\", \"packets\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.io.usage.rx\", \"_\", \"packets\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Count\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.io.usage.rx\", \"_\", \"errors\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.io.usage.rx\", \"_\", \"errors\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Count\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.io.usage.rx\", \"_\", \"dropped\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.io.usage.rx\", \"_\", \"dropped\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Count\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.io.usage.tx\", \"_\", \"bytes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.io.usage.tx\", \"_\", \"bytes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.io.usage.tx\", \"_\", \"packets\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.io.usage.tx\", \"_\", \"packets\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Count\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.io.usage.tx\", \"_\", \"errors\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.io.usage.tx\", \"_\", \"errors\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Count\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.network.io.usage.tx\", \"_\", \"dropped\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.network.io.usage.tx\", \"_\", \"dropped\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Count\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.storage.read\", \"_\", \"bytes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.storage.read\", \"_\", \"bytes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task.storage.write\", \"_\", \"bytes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.storage.write\", \"_\", \"bytes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bytes\")))), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"resource-attributes-and-metrics-labels\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#resource-attributes-and-metrics-labels\",\n    \"aria-label\": \"resource attributes and metrics labels permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Resource Attributes and Metrics Labels\"), mdx(\"p\", null, \"Metrics emitted by this receiver comes with a set of resource attributes. These resource attributes can be converted to\\nmetrics labels using appropriate processors/exporters (See \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Full Configuration Examples\"), \" section below). These metrics\\nlabels can be set as metrics dimensions while exporting to desired destinations. Check the following table to see\\navailable resource attributes for Task and Container level metrics. Container level metrics have three additional\\nattributes than task level metrics.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Resource Attributes for Task Level Metrics\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Resource Attributes for Container Level Metrics\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.cluster\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.cluster\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task-definition-family\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task-definition-family\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task-arn\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task-arn\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task-id\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task-id\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task-definition-version\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.task-definition-version\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.service\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.service\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.name\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container.id\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ecs.docker-name\")))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Enabling the AWS ECS Container Metrics Receiver"},{"depth":2,"value":"Set Collection Interval Metrics"},{"depth":2,"value":"Collect specific metrics and update metric names"},{"depth":2,"value":"A full configuration for task level metrics"},{"depth":2,"value":"Available Metrics"},{"depth":2,"value":"Resource Attributes and Metrics Labels"}]}},"pageContext":{"slug":"/docs/getting-started/ecs-metrics-receiver/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/ecs-metrics-receiver.mdx"}},"staticQueryHashes":["2501019404","973074209"]}